"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const ROOT_URL = 'https://www.googleapis.com/youtube/v3/search';
exports.youtubeSearch = function (options, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!options.key || !options.term) {
            throw new Error('Youtube Search expected key and term, received undefined');
        }
        if (!options.part) {
            options.part = 'snippet';
        }
        if (!options.type) {
            options.type = 'video';
        }
        const params = Object.assign({ q: options.term }, options);
        return axios_1.default
            .get(ROOT_URL, { params })
            .then((response) => {
            if (callback) {
                callback(response.data.items);
            }
            return response.data.items;
        })
            .catch((error) => {
            if (callback) {
                callback(null);
            }
            throw error;
        });
    });
};
exports.default = exports.youtubeSearch;
//# sourceMappingURL=index.js.map